{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww34360\viewh20460\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ******************************Friday, May 9, 2025 at 7:50\uc0\u8239 PM\
\
import numpy as np\
\
from itertools import combinations\
\
import matplotlib.pyplot as plt\
\
\'a0\
\
# Example change scores\
\
fes_change = np.array([0.8, 0.6, 0.9, 0.6, 0.6, 0.6, 0.8])\'a0\'a0\'a0\'a0\'a0\'a0\'a0 # n=7\
\
cycling_change = np.array([0.2, 0.1, 0.1, 0.2, 0.1])\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 # n=5\
\
\'a0\
\
# Combine all change scores\
\
all_data = np.concatenate([fes_change, cycling_change])\
\
n_total = len(all_data)\
\
n_fes = len(fes_change)\
\
\'a0\
\
# Observed difference in means\
\
observed_diff = np.mean(fes_change) - np.mean(cycling_change)\
\
\'a0\
\
# Generate all combinations of indices for FES group\
\
perm_diffs = []\
\
for indices in combinations(range(n_total), n_fes):\
\
\'a0\'a0\'a0 group1 = all_data[list(indices)]\
\
\'a0\'a0\'a0 group2 = np.delete(all_data, indices)\
\
\'a0\'a0\'a0 diff = np.mean(group1) - np.mean(group2)\
\
\'a0\'a0\'a0 perm_diffs.append(diff)\
\
\'a0\
\
# Two-sided exact p-value\
\
perm_diffs = np.array(perm_diffs)\
\
p_value = np.mean(np.abs(perm_diffs) >= np.abs(observed_diff))\
\
\'a0\
\
# Plot\
\
plt.hist(perm_diffs, bins=30, color='lightgray', edgecolor='black')\
\
plt.axvline(observed_diff, color='red', linestyle='--', label='Observed')\
\
plt.axvline(-observed_diff, color='red', linestyle='--')\
\
plt.title("Exact Permutation Test (Mean Difference)")\
\
plt.xlabel("Mean Differences from Permutations")\
\
plt.ylabel("Frequency")\
\
plt.legend()\
\
plt.tight_layout()\
\
plt.show()\
\
\'a0\
\
# Output\
\
print(f"Observed difference in mean change: \{observed_diff:.4f\}")\
\
print(f"Exact permutation p-value:\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \{p_value:.4f\}")\
\
\
**************Tuesday, May 6, 2025 at 3:49\uc0\u8239 PM\
\
\
import numpy as np\
\
import matplotlib.pyplot as plt\
\
\'a0\
\
# Example data (pre and post values for 2 groups of 7)\
\
fes_pre = np.array([3.2, 3.5, 3.1, 3.3, 3.6, 3.4, 3.0])\
\
fes_post = np.array([4.0, 4.1, 4.0, 3.9, 4.2, 4.0, 3.8])\
\
\'a0\
\
cycling_pre = np.array([3.1, 3.0, 3.2, 3.4, 3.3, 3.1, 3.2])\
\
cycling_post = np.array([3.3, 3.1, 3.3, 3.6, 3.5, 3.2, 3.3])\
\
\'a0\
\
# Compute change scores\
\
fes_change = fes_post - fes_pre\
\
cycling_change = cycling_post - cycling_pre\
\
\'a0\
\
# Combine data\
\
all_changes = np.concatenate([fes_change, cycling_change])\
\
group_labels = np.array([1]*len(fes_change) + [0]*len(cycling_change))\
\
\'a0\
\
# Observed difference in means (or medians)\
\
observed_stat = np.mean(fes_change) - np.mean(cycling_change)\
\
\'a0\
\
# Permutation test\
\
n_perms = 20000\
\
perm_stats = []\
\
\'a0\
\
for _ in range(n_perms):\
\
\'a0\'a0\'a0 shuffled = np.random.permutation(group_labels)\
\
\'a0\'a0\'a0 perm_group1 = all_changes[shuffled == 1]\
\
\'a0\'a0\'a0 perm_group2 = all_changes[shuffled == 0]\
\
\'a0\'a0\'a0 perm_stats.append(np.mean(perm_group1) - np.mean(perm_group2))\
\
\'a0\
\
# Two-sided p-value\
\
p_value = np.mean(np.abs(perm_stats) >= np.abs(observed_stat))\
\
\'a0\
\
# Plot\
\
plt.hist(perm_stats, bins=30, color='lightgray', edgecolor='black')\
\
plt.axvline(observed_stat, color='red', linestyle='--', label='Observed Difference')\
\
plt.axvline(-observed_stat, color='red', linestyle='--')\
\
plt.title("Between-Group Permutation Test (Change Scores)")\
\
plt.xlabel("Permuted Group Mean Differences")\
\
plt.ylabel("Frequency")\
\
plt.legend()\
\
plt.tight_layout()\
\
plt.show()\
\
\'a0\
\
# Report\
\
print(f"Observed difference in mean change: \{observed_stat:.4f\}")\
\
print(f"Permutation p-value (two-sided):\'a0\'a0\'a0 \{p_value:.4f\}")\
\
\
\
**************************\'a0Tuesday, May 6, 2025 at 12:01\uc0\u8239 PM\
\
Test using mean as test statistics:\
\
import numpy as np\
\
import matplotlib.pyplot as plt\
\
from itertools import product\
\
\'a0\
\
# Sample data: 7 subjects, pre and post treatment\
\
pre = np.array([3.1, 2.7, 4.0, 3.5, 2.9, 3.8, 4.1])\
\
post = np.array([3.8, 3.0, 4.5, 4.1, 3.0, 4.2, 4.4])\
\
\'a0\
\
# Step 1: Compute pre-post difference\
\
diff = post - pre\
\
observed_stat = np.mean(diff)\
\
\'a0\
\
# Step 2: Generate all 2^7 = 128 sign-flip permutations\
\
sign_flips = np.array(list(product([-1, 1], repeat=len(diff))))\
\
perm_stats = np.array([np.mean(diff * flip) for flip in sign_flips])\
\
\'a0\
\
# Step 3: Compute two-sided p-value\
\
p_value = np.mean(np.abs(perm_stats) >= np.abs(observed_stat))\
\
\'a0\
\
# Step 4: Plot the permutation null distribution\
\
plt.hist(perm_stats, bins=20, color='lightgray', edgecolor='black')\
\
plt.axvline(observed_stat, color='red', linestyle='--', label='Observed Mean')\
\
plt.axvline(-observed_stat, color='red', linestyle='--')\
\
plt.title("Permutation Test (Mean-Based)")\
\
plt.xlabel("Permuted Mean Differences")\
\
plt.ylabel("Frequency")\
\
plt.legend()\
\
plt.tight_layout()\
\
plt.show()\
\
\'a0\
\
# Step 5: Report results\
\
print(f"Observed mean difference:\'a0\'a0 \{observed_stat:.4f\}")\
\
print(f"Exact permutation p-value:\'a0 \{p_value:.4f\}")\
\
\'a0\
\
\'a0\
\
\'a0\
\
Test using median as test statistics:\
\
import numpy as np\
\
import matplotlib.pyplot as plt\
\
from itertools import product\
\
\'a0\
\
# Sample data: 7 subjects, pre and post treatment\
\
pre = np.array([3.1, 2.7, 4.0, 3.5, 2.9, 3.8, 4.1])\
\
post = np.array([3.8, 3.0, 4.5, 4.1, 3.0, 4.2, 4.4])\
\
\'a0\
\
# Step 1: Compute pre-post difference\
\
diff = post - pre\
\
observed_stat = np.median(diff)\
\
\'a0\
\
# Step 2: Generate all 2^7 = 128 sign-flip permutations\
\
sign_flips = np.array(list(product([-1, 1], repeat=len(diff))))\
\
perm_stats = np.array([np.median(diff * flip) for flip in sign_flips])\
\
\'a0\
\
# Step 3: Compute two-sided p-value\
\
p_value = np.mean(np.abs(perm_stats) >= np.abs(observed_stat))\
\
\'a0\
\
# Step 4: Plot the permutation null distribution\
\
plt.hist(perm_stats, bins=20, color='lightgray', edgecolor='black')\
\
plt.axvline(observed_stat, color='red', linestyle='--', label='Observed Median')\
\
plt.axvline(-observed_stat, color='red', linestyle='--')\
\
plt.title("Permutation Test (Median-Based)")\
\
plt.xlabel("Permuted Median Differences")\
\
plt.ylabel("Frequency")\
\
plt.legend()\
\
plt.tight_layout()\
\
plt.show()\
\
\'a0\
\
# Step 5: Report results\
\
print(f"Observed median difference: \{observed_stat:.4f\}")\
\
print(f"Exact permutation p-value:\'a0 \{p_value:.4f\}")\
\
\
}